**Network Policies** в Kubernetes — это объект, который определяет правила управления сетевым трафиком между подами (Pods) и сетевыми сущностями внутри кластера. Они используются для ограничения и контроля входящего (**ingress**) и исходящего (**egress**) трафика между подами на уровне сетевого взаимодействия.  

Сетевые политики позволяют улучшить безопасность, изолируя поды и управляя их сетевой доступностью.

---

### **Основные задачи Network Policies:**
1. **Изоляция сетевого трафика:**  
   По умолчанию все поды могут взаимодействовать друг с другом без ограничений. Network Policies позволяют контролировать, какие поды могут обмениваться трафиком.

2. **Управление входящим трафиком (Ingress):**  
   Определяет, кто может отправлять сетевые запросы в под.

3. **Управление исходящим трафиком (Egress):**  
   Определяет, куда под может отправлять сетевые запросы.

---

### **Как работают Network Policies?**
- **Network Policies** работают на уровне **CNI (Container Network Interface)** плагинов, таких как:
  - Calico  
  - Weave  
  - Cilium  
  - Flannel (не поддерживает Network Policies).  

> **Важно:** Чтобы Network Policies работали, CNI-плагин должен поддерживать их реализацию.

- По умолчанию **поды открыты для всех**, пока не применена хотя бы одна Network Policy.

- **Правила политики** описываются на основе **меток (Labels)**, которые задают:
  - Какие поды участвуют в политике.
  - Какой трафик разрешён или запрещён.

---

### **Пример Network Policy:**
#### 1. Политика для входящего трафика (Ingress):  
Позволяет входящие соединения только от подов с меткой `app=frontend` к подам с меткой `app=backend` на порту 80.

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-frontend
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: backend              # Поды, к которым применяется политика
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend         # Разрешён трафик только от подов с меткой app=frontend
    ports:
    - protocol: TCP
      port: 80                 # Разрешённый порт
```

#### Разбор:
- **`podSelector`:** Политика применяется к подам с меткой `app=backend`.
- **`policyTypes`:** Тип политики (Ingress для входящего трафика).
- **`from`:** Определяет, кто может отправлять трафик (поды с меткой `app=frontend`).
- **`ports`:** Порт и протокол, на который разрешён трафик.

---

#### 2. Политика для исходящего трафика (Egress):  
Разрешает подам с меткой `app=frontend` отправлять трафик на внешний IP-адрес (например, 8.8.8.8 — Google DNS) на порту 53 (DNS).

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress-dns
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: frontend             # Поды, для которых применяется политика
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 8.8.8.8/32        # Разрешённый внешний IP
    ports:
    - protocol: UDP
      port: 53                  # Разрешённый порт (DNS)
```

#### Разбор:
- **`podSelector`:** Политика применяется к подам с меткой `app=frontend`.
- **`policyTypes`:** Политика для исходящего трафика (Egress).
- **`to`:** Разрешает отправку трафика на IP `8.8.8.8`.
- **`ports`:** Порт и протокол для разрешённого трафика.

---

### **Типы трафика, контролируемые Network Policies:**
1. **Ingress:**  
   Управляет входящим трафиком в под.

2. **Egress:**  
   Управляет исходящим трафиком из пода.

---

### **Особенности работы:**
1. Если политика определена для **Ingress**, то **весь трафик блокируется**, кроме явно разрешённого.
2. Если политика определена для **Egress**, то весь исходящий трафик блокируется, кроме явно разрешённого.
3. Политики не имеют обратной силы:  
   - Если под не попадает в `podSelector`, политика на него **не распространяется**.
4. Network Policies **не блокируют** трафик, идущий через сервисы `NodePort` или `LoadBalancer`, а только межпудовый трафик.

---

### **Преимущества использования Network Policies:**
1. **Безопасность:**  
   - Позволяют изолировать поды и ограничивать сетевые взаимодействия.
   - Защищают от несанкционированного доступа.

2. **Гибкость:**  
   - Позволяют задавать сложные правила маршрутизации трафика.

3. **Масштабируемость:**  
   - Использование меток (labels) упрощает управление политиками при большом количестве подов.

4. **Соответствие стандартам:**  
   - Network Policies помогают соответствовать требованиям безопасности, таким как PCI DSS или GDPR.

---

### **Ограничения Network Policies:**
1. **Только L3/L4:**  
   Network Policies работают на сетевом уровне (IP и порты), но не на уровне приложений (L7), например, HTTP.

2. **Зависимость от CNI-плагина:**  
   Network Policies не работают с плагинами, которые их не поддерживают (например, Flannel).

3. **Нет deny-правил:**  
   Kubernetes Network Policies определяют **только разрешающие (allow)** правила. Блокировка трафика происходит автоматически, если явно не разрешено.

---

### **Заключение:**
Network Policies в Kubernetes — это мощный инструмент для управления сетевым трафиком и изоляции подов. Они позволяют контролировать как входящие, так и исходящие соединения, обеспечивая безопасность и управляемость на сетевом уровне. Для их работы требуется CNI-плагин с поддержкой Network Policies, а правила задаются с использованием меток и диапазонов IP-адресов.